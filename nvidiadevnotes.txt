
nvidia installer dev notes

# mount /dev/sdd2 /mnt
# sudo bash /mnt/scripts/nvidia37566gpu.sh



# This script will eventually automatically install proprietary NVIDIA drivers from any installation point.
# This will require:
# -cronjobs to hook through reboots
# -Progress checks
# -Detect GPU





if [[ $(runlevel | awk '{ print $2 }') -gt 3 ]]; then
  echo "Runlevel is greater than 3"
  echo "Reboot and edit grub temporarily (press arrow keys up and down repeatedly during boot)"
  echo "Press 'e' on the top entry to edit temporarily.  Edit the line that starts with linux.  Add these entries around words like 'ro quiet':"
  echo "nomodeset rdblacklist nouveau 3"
  
  if [[ $(cat /etc/*-release | grep ID_LIKE | grep rhel | wc -l) -gt 0 ]]; then
    echo "This is an rpm based system"
    
    # https://access.redhat.com/solutions/1155663
    # Edit /etc/default/grub and add the following to the GRUB_CMDLINE_LINUX line:
    # modprobe.blacklist=nouveau nomodeset 3
    # Rebuild the grub config and restart the system:
    # grub2-mkconfig -o /boot/grub2/grub.cfg
  fi
  
  exit 1
fi


if [[ $(cat /etc/*-release | grep ID_LIKE | grep rhel | wc -l) -gt 0 ]]; then
  echo "This is an rpm based system"
  
  # https://access.redhat.com/solutions/1155663
  # Edit /etc/default/grub and add the following to the GRUB_CMDLINE_LINUX line:
  # modprobe.blacklist=nouveau nomodeset 3
  # Rebuild the grub config and restart the system:
  # grub2-mkconfig -o /boot/grub2/grub.cfg
fi

if [[ $(cat /etc/*-release | grep \ 6 | grep -e CentOS -e rhel -e Scientific | wc -l) -gt 0 ]]; then
  echo "This is an rpm based system"
  echo "Major version 6."
  echo "This NVIDIA automated installation command will not work."
  echo "Run this command:"
  echo "   sudo sh /tmp/NVIDIA-Linux-x86_64-375.66.run"
  echo "Answer yes to all questions."
fi

if [[ $(cat /etc/*-release | grep ID_LIKE | grep debian | wc -l) -gt 0 ]]; then
  echo "This is a deb based system"

  echo "Testing for Ubuntu Desktop...  This may take a moment..."
  if [[ $(apt-cache show $(dpkg-query -Wf '${Package}\n') | awk '$1 == "Package:" { pkg = $2 } $1 == "Section:" && $2 ~ /metapackage/ { print pkg }' | grep desktop | grep -v -e auto -e core | wc -l) -gt 0 ]]; then
    echo "This is a Ubuntu Desktop"
  fi

fi


# INCOMPLETE: Find out if following GPU or MB workflow...
# Use 'xrandr -q' to find out information about video output.
# The plus sign '+' signifies which display is in use.
# https://askubuntu.com/questions/186288/how-to-detect-and-configure-an-output-with-xrandr

# lshw -numeric -C display
# lspci -vnn | grep VGA -A 12
# sudo dmidecode -t baseboard | grep -i 'Product'
# inxi -M
# glxinfo | grep OpenGL
# http://www.binarytides.com/linux-get-gpu-information/

# lspci -vnnn | perl -lne 'print if /^\d+\:.+(\[\S+\:\S+\])/' | grep VGA
# ubuntudroid from https://unix.stackexchange.com/questions/16407/how-to-check-which-gpu-is-active.


# VGA example
sudo lshw -c video
  *-display               
       description: VGA compatible controller
       product: 4 Series Chipset Integrated Graphics Controller
       vendor: Intel Corporation
       physical id: 2
       bus info: pci@0000:00:02.0
       version: 03
       width: 64 bits
       clock: 33MHz
       capabilities: msi pm vga_controller bus_master cap_list rom
       configuration: driver=i915 latency=0
       resources: irq:28 memory:e0000000-e03fffff memory:d0000000-dfffffff ioport:f0f0(size=8)




https://unix.stackexchange.com/questions/47584/in-a-bash-script-using-the-conditional-or-in-an-if-statement

echo "Installing proprietary NVIDIA drivers..."
if [[ $(lspci | grep 1b38 | wc -l) -gt 0 ]] || [[ <INSERT RHEL DESCRIPTOR HERE> ]]; then
  echo "Tesla P40 found! OR RHEL found
  echo "Skipping DKMS..."
  echo "Installing NVIDIA drivers..."
else
  echo "Installing dkms..."
  echo "Installing NVIDIA drivers..."
fi


# Fedora 25 / wayland patch
# https://ask.fedoraproject.org/en/question/103665/patch-for-proprietary-nvidia-37539-drivers-with-kernel-410/
# https://pastebin.com/giS541m0
#
# dnf install -y dkms
# wget https://pastebin.com/raw/giS541m0
# sh NVIDIA-Linux-x86_64-378.13.run -x
# cp giS541m0 NVIDIA-Linux-x86_64-378.13/
# cd NVIDIA-Linux-x86_64-378.13/
# patch -p1 < patch.txt
# ./nvidia-installer


#sh cuda.run --toolkit -silent
#if stout matches override
#sh cuda.run --toolkit -silent --override



#echo "Cleaning up..."
#rm -f NVIDIA-Linux-x86_64-375.26.run 2>/dev/null
#rm -f NVIDIA-Linux-x86_64-375.39.run 2>/dev/null
#rm -f NVIDIA-Linux-x86_64-375.66.run 2>/dev/null
#rm -f NVIDIA-Linux-x86_64-378.13.run 2>/dev/null
#rm -rf NVIDIA-Linux-x86_64-375.39/ 2>/dev/null
#rm -rf NVIDIA-Linux-x86_64-378.13/ 2>/dev/null
#rm -f cuda_8.0.44_linux-run 2>/dev/null
#rm -f cuda_8.0.61_375.26_linux-run 2>/dev/null


# Reboot
#echo sleep 5 > /tmp/umsd.sh
#echo umount /mnt >> /tmp/umsd.sh
#echo reboot >> /tmp/umsd.sh
#sh /tmp/umsd.sh













Old lines
#wget -q http://us.download.nvidia.com/XFree86/Linux-x86_64/375.26/NVIDIA-Linux-x86_64-375.26.run
#wget -q http://us.download.nvidia.com/XFree86/Linux-x86_64/375.39/NVIDIA-Linux-x86_64-375.39.run
#wget -q ftp://10.12.17.15/pub/utility/nvidia/NVIDIA-Linux-x86_64-375.66.run

#wget -q https://developer.nvidia.com/compute/cuda/8.0/prod/local_installers/cuda_8.0.44_linux-run

#sh NVIDIA-Linux-x86_64-375.26.run --accept-license -q -X
#sh NVIDIA-Linux-x86_64-375.39.run --accept-license -q -X
#sh NVIDIA-Linux-x86_64-375.66.run --accept-license -q -X

# sh cuda_8.0.44_linux-run --toolkit -silent --override



  #sh NVIDIA-Linux-x86_64-375.26.run --accept-license -q --no-opengl-files
  #sh NVIDIA-Linux-x86_64-375.39.run --accept-license -q --no-opengl-files
  #sh NVIDIA-Linux-x86_64-375.66.run --accept-license -q --no-opengl-files


  #sh NVIDIA-Linux-x86_64-375.26.run --accept-license -q --dkms --no-opengl-files
  #sh NVIDIA-Linux-x86_64-375.39.run --accept-license -q --dkms --no-opengl-files
  #sh NVIDIA-Linux-x86_64-375.66.run --accept-license -q --dkms --no-opengl-files



# sh cuda_8.0.44_linux-run --toolkit -silent --override


